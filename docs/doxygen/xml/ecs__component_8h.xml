<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ecs__component_8h" kind="file" language="C++">
    <compoundname>ecs_component.h</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includedby refid="ecs_8h" local="yes">/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs.h</includedby>
    <includedby refid="ecs__system_8h" local="yes">/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_system.h</includedby>
    <includedby refid="ecs__component_8cpp" local="yes">/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.cpp</includedby>
    <incdepgraph>
      <node id="65">
        <label>/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h</label>
        <link refid="ecs__component_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>tuple</label>
      </node>
      <node id="67">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="68">
        <label>/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h</label>
        <link refid="ecs__component_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs.h</label>
        <link refid="ecs_8h_source"/>
      </node>
      <node id="70">
        <label>/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_system.h</label>
        <link refid="ecs__system_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classBaseECSComponent" prot="public">BaseECSComponent</innerclass>
    <innerclass refid="structECSComponent" prot="public">ECSComponent</innerclass>
    <innerclass refid="structTestComponent" prot="public">TestComponent</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ecs__component_8h_1a54492293082dd10a98e4c5e1900b1479" prot="public" static="no">
        <type>void *</type>
        <definition>using EntityHandle =  void*</definition>
        <argsstring></argsstring>
        <name>EntityHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="14" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ecs__component_8h_1a77afc6554c28c27194e4548d5423f9b7" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using compId_t =  uint32_t</definition>
        <argsstring></argsstring>
        <name>compId_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="15" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ecs__component_8h_1aaeed4d55039951037f9d1279052c05eb" prot="public" static="no">
        <type>void(*)(<ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref> *comp)</type>
        <definition>using ECSComponentFreeFunction =  void (*)(BaseECSComponent* comp)</definition>
        <argsstring></argsstring>
        <name>ECSComponentFreeFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="18" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ecs__component_8h_1abd721b4b08bd8cd83b4b12cfdb0730a0" prot="public" static="no">
        <type>compId_t(*)(std::vector&lt; uint8_t &gt; &amp;memory, EntityHandle entity, <ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref> *comp)</type>
        <definition>using ECSComponentCreateFunction =  compId_t (*)(std::vector&lt;uint8_t&gt;&amp; memory, EntityHandle entity, BaseECSComponent* comp)</definition>
        <argsstring></argsstring>
        <name>ECSComponentCreateFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="19" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecs__component_8h_1ac81e66c9e209fcbdc11271b43b8921c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Component</type>
          </param>
        </templateparamlist>
        <type>compId_t</type>
        <definition>compId_t ECSComponentCreate</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;memory, EntityHandle entity, BaseECSComponent *comp)</argsstring>
        <name>ECSComponentCreate</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>EntityHandle</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref> *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates component and allocates memory for it. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Component</parametername>
</parameternamelist>
<parameterdescription>
<para>component class </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entity</parametername>
</parameternamelist>
<parameterdescription>
<para>Entity in which the Component will be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>component </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Component index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="80" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="80" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ecs__component_8h_1a912ea7c4540a5100a5f07f9969d806bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Component</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ECSComponentFree</definition>
        <argsstring>(BaseECSComponent *comp)</argsstring>
        <name>ECSComponentFree</name>
        <param>
          <type><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref> *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees component from memory <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Component</parametername>
</parameternamelist>
<parameterdescription>
<para>component class </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>component </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" line="100" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h" bodystart="100" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Maksim<sp/>Ruts<sp/>on<sp/>02/10/2019.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Entity<sp/>component<sp/>system<sp/>from<sp/>&apos;thebennybox&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://raw.githubusercontent.com/BennyQBD/3DGameProgrammingTutorial/master/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SCARECROW2D_ECS_COMPONENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCARECROW2D_ECS_COMPONENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>EntityHandle<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>compId_t<sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ECSComponentFreeFunction<sp/>=<sp/>void<sp/>(*)(<ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref>*<sp/>comp);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ECSComponentCreateFunction<sp/>=<sp/>compId_t<sp/>(*)(std::vector&lt;uint8_t&gt;&amp;<sp/>memory,<sp/>EntityHandle<sp/>entity,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref>*<sp/>comp);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classBaseECSComponent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>register_component_type(ECSComponentCreateFunction<sp/>createfn,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECSComponentFreeFunction<sp/>freefn,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>EntityHandle<sp/>entity<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ECSComponentCreateFunction<sp/>get_type_createfn(compId_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(component_types[id]);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ECSComponentFreeFunction<sp/>get_type_freefn(compId_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(component_types[id]);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_type_size(compId_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;2&gt;(component_types[id]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_type_valid(compId_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>component_types.size();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::tuple&lt;ECSComponentCreateFunction,<sp/>ECSComponentFreeFunction,<sp/>size_t&gt;&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>component_types;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61" refid="structECSComponent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structECSComponent" kindref="compound">ECSComponent</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63" refid="structECSComponent_1a0f13ee7a0f2f40ceb48f2e7739ee081f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECSComponentCreateFunction<sp/><ref refid="structECSComponent_1a0f13ee7a0f2f40ceb48f2e7739ee081f" kindref="member">CREATE_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="64" refid="structECSComponent_1a83c38574e296ac5e057c33d589f420ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECSComponentFreeFunction<sp/><ref refid="structECSComponent_1a83c38574e296ac5e057c33d589f420ad" kindref="member">FREE_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>for<sp/>component<sp/>type<sp/>in<sp/>oder<sp/>to<sp/>distinguish<sp/>type<sp/>from<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>compId_t<sp/>id;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Component<sp/>type<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structECSComponent_1a307a02bf9d5ea085acc38b6842e6dadf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structECSComponent_1a307a02bf9d5ea085acc38b6842e6dadf" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">compId_t<sp/>ECSComponentCreate(std::vector&lt;uint8_t&gt;&amp;<sp/>memory,<sp/>EntityHandle<sp/>entity,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref>*<sp/>comp)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>last<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>memory.size();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resizing,<sp/>making<sp/>an<sp/>offset<sp/>with<sp/>&apos;last<sp/>index<sp/>+<sp/>component<sp/>size&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>memory.resize(index<sp/>+<sp/>Component::size);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>new<sp/>component<sp/>in<sp/>the<sp/>address<sp/>of<sp/>&apos;memory&apos;<sp/>which<sp/>is<sp/>already<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Component*<sp/>component<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;memory[index])<sp/>Component(*(Component*)comp);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>component-&gt;entity<sp/>=<sp/>entity;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ECSComponentFree(<ref refid="classBaseECSComponent" kindref="compound">BaseECSComponent</ref>*<sp/>comp)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Component*<sp/>component<sp/>=<sp/>(Component*)comp;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>component-&gt;~Component();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structECSComponent" kindref="compound">ECSComponent&lt;T&gt;::id</ref>(BaseECSComponent::register_component_type(ECSComponentCreate&lt;T&gt;,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECSComponentFree&lt;T&gt;,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structECSComponent_1a307a02bf9d5ea085acc38b6842e6dadf" kindref="member">ECSComponent&lt;T&gt;::size</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECSComponentCreateFunction<sp/><ref refid="structECSComponent_1a0f13ee7a0f2f40ceb48f2e7739ee081f" kindref="member">ECSComponent&lt;T&gt;::CREATE_FUNCTION</ref>(ECSComponentCreate&lt;T&gt;);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ECSComponentFreeFunction<sp/><ref refid="structECSComponent_1a83c38574e296ac5e057c33d589f420ad" kindref="member">ECSComponent&lt;T&gt;::FREE_FUNCTION</ref>(ECSComponentFree&lt;T&gt;);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXAMPLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="structTestComponent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestComponent" kindref="compound">TestComponent</ref><sp/>:<sp/><ref refid="structECSComponent" kindref="compound">ECSComponent</ref>&lt;TestComponent&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//SCARECROW2D_ECS_COMPONENT_H</highlight></codeline>
    </programlisting>
    <location file="/home/novasurfer/projects/scarecrow2d/src/core/esc/ecs_component.h"/>
  </compounddef>
</doxygen>
