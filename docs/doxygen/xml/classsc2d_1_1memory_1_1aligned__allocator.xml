<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsc2d_1_1memory_1_1aligned__allocator" kind="class" language="C++" prot="public">
    <compoundname>sc2d::memory::aligned_allocator</compoundname>
    <innerclass refid="structsc2d_1_1memory_1_1aligned__allocator_1_1rebind" prot="public">sc2d::memory::aligned_allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a7e9544ebe3eb593df8284851c84d8315" prot="public" static="no">
        <type>T</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="57" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a119bdc564c328a947c7f48c8a74c7748" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="58" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a9f056691a2e1f7b89fab25068753a8cf" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="59" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a8df04c7b694d1ef7b639556065b57622" prot="public" static="no">
        <type>T *</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="60" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a44f9e1a4d5b0c7962635108ee9cc7bef" prot="public" static="no">
        <type>const T *</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="61" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1a798289bfbc510a192c5db9bfc61bda44" prot="public" static="no">
        <type>size_t</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::size_type =  size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="62" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc2d_1_1memory_1_1aligned__allocator_1afa4299d8c782bfdc6b2752762ec238aa" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>using sc2d::memory::aligned_allocator&lt; T, N &gt;::difference_type =  ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="63" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1aa4f82a600ea6ce5a4ffc18003552236e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr pointer sc2d::memory::aligned_allocator&lt; T, N &gt;::address</definition>
        <argsstring>(reference r) const</argsstring>
        <name>address</name>
        <param>
          <type>reference</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="71" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1a3f58fa762584bf3f7b15b16680357949" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const_pointer</type>
        <definition>constexpr const_pointer sc2d::memory::aligned_allocator&lt; T, N &gt;::address</definition>
        <argsstring>(const_reference r) const</argsstring>
        <name>address</name>
        <param>
          <type>const_reference</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="76" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1a1d8f8fb1805d7bc377229988603a6290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr aligned_allocator&lt; T, N &gt;::pointer sc2d::memory::aligned_allocator&lt; T, N &gt;::allocate</definition>
        <argsstring>(size_type n, typename std::allocator&lt; void &gt;::const_pointer hint=nullptr) const</argsstring>
        <name>allocate</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>typename std::allocator&lt; void &gt;::const_pointer</type>
          <declname>hint</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="82" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1acb35494007514a0f7c20f75b572d6dd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr pointer</type>
        <definition>constexpr aligned_allocator&lt; T, N &gt;::pointer sc2d::memory::aligned_allocator&lt; T, N &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type size) const</argsstring>
        <name>deallocate</name>
        <param>
          <type>pointer</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="84" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1aff7dc7874e2184761af3dcbfac027cf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void sc2d::memory::aligned_allocator&lt; T, N &gt;::construct</definition>
        <argsstring>(pointer p, const_reference value) const</argsstring>
        <name>construct</name>
        <param>
          <type>pointer</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const_reference</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="86" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1a3e471bbd1e62b8f18780fe4cb6dd5ceb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void sc2d::memory::aligned_allocator&lt; T, N &gt;::destroy</definition>
        <argsstring>(pointer p) const</argsstring>
        <name>destroy</name>
        <param>
          <type>pointer</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="91" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1ad4eff1fd881e2165a00eb7c453d7ecf4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_type</type>
        <definition>constexpr size_type sc2d::memory::aligned_allocator&lt; T, N &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="96" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1a4302236c69dfdbcb5c15668dac281bb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool sc2d::memory::aligned_allocator&lt; T, N &gt;::operator==</definition>
        <argsstring>(const aligned_allocator &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsc2d_1_1memory_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="101" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classsc2d_1_1memory_1_1aligned__allocator_1a48f93caeb57d9216ebc88f3be87a7ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool sc2d::memory::aligned_allocator&lt; T, N &gt;::operator!=</definition>
        <argsstring>(const aligned_allocator &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classsc2d_1_1memory_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="106" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="106" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" line="55" column="1" bodyfile="/home/novasurfer/projects/scarecrow2d/src/memory/aligned_allocator.h" bodystart="54" bodyend="110"/>
    <listofallmembers>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1aa4f82a600ea6ce5a4ffc18003552236e" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>address</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a3f58fa762584bf3f7b15b16680357949" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>address</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a1d8f8fb1805d7bc377229988603a6290" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>allocate</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a44f9e1a4d5b0c7962635108ee9cc7bef" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>const_pointer</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a9f056691a2e1f7b89fab25068753a8cf" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>const_reference</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1aff7dc7874e2184761af3dcbfac027cf3" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>construct</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1acb35494007514a0f7c20f75b572d6dd3" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>deallocate</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a3e471bbd1e62b8f18780fe4cb6dd5ceb" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>destroy</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1afa4299d8c782bfdc6b2752762ec238aa" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>difference_type</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1ad4eff1fd881e2165a00eb7c453d7ecf4" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>max_size</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a48f93caeb57d9216ebc88f3be87a7ff6" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>operator!=</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a4302236c69dfdbcb5c15668dac281bb9" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>operator==</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a8df04c7b694d1ef7b639556065b57622" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>pointer</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a119bdc564c328a947c7f48c8a74c7748" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>reference</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a798289bfbc510a192c5db9bfc61bda44" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>size_type</name></member>
      <member refid="classsc2d_1_1memory_1_1aligned__allocator_1a7e9544ebe3eb593df8284851c84d8315" prot="public" virt="non-virtual"><scope>sc2d::memory::aligned_allocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
